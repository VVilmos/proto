package Model;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentSkipListMap;

/**
 * Akt√≠v elemeket reprezent√°l√≥ absztrakt oszt√°ly
 * Felel≈ëss√©ge: t√°rolja a hozz√° csatlakoztatott cs√∂veket k√∂zvetve a cs≈ëv√©gek √°ltal
 */
public abstract class Node extends Element implements ISteppable{
    /**
     * fix hossz√∫s√°g√∫ cs≈ëv√©gekb≈ël √°ll√≥ t√∂mb, az akt√≠v elemhez csatlakoztatott cs≈ëv√©geket jel√∂li
     */
    protected List<PipeEnd> pipeEnds = new ArrayList<PipeEnd>();

    /**
     * Az akt√≠v elemre egy karakter pr√≥b√°l l√©pni
     * @param p az √©rkez≈ë karakter
     * @return a mez≈ëv√°lt√°s/karakterfogad√°s sikeress√©ge
     */
    @Override
    public boolean AcceptPlayer(Player p) {
        Skeleton.Start(this, "AcceptPlayer(" + Skeleton.GetObjectName(p) + ")");
        players.add(p);

        Skeleton.End();
        Skeleton.PrintReturn("true");
        return true;
    }

    /**
     * Absztrakt f√ºggv√©ny, az akt√≠v elem l√©p
     */
    @Override
    public abstract void Step();

    public List<Element> GetNeighbours() {
        Skeleton.Start(this, "GetNeighbours()");
        List<Element> neighbours = new ArrayList<>();
        for (int i = 0; i < pipeEnds.size(); i++){
            if (pipeEnds.get(i) != null) {
                neighbours.add(pipeEnds.get(i).GetOwnPipe());
            }
        }
        Skeleton.End();
        Skeleton.PrintReturn("neighbours");
        return neighbours;
    }

    /**
     * Egy szabadv√©g≈± cs≈ë csatlakoztat√°sa az akt√≠v elemhez
     * @param pe a cs≈ë szabad/be nem k√∂t√∂tt v√©ge
     * @return a felcsatlakoztat√°s sikeress√©ge
     */
    public boolean AddPipe(PipeEnd pe)  {
        Skeleton.Start(this, "AddPipe(" + Skeleton.GetObjectName(pe) + ")");
        if (pipeEnds.size() <= 8) { //üòé
            pipeEnds.add(pe);
            pe.ConnectNode(this);

            Skeleton.End();
            Skeleton.PrintReturn("true");
            return true;
        }
        else {
            Skeleton.End();
            Skeleton.PrintReturn("false");
            return false;
        }
    }

    /**
     * Egy bek√∂t√∂tt cs≈ë elt√°vol√≠t√°sa az akt√≠v elemr≈ël
     * @param pe az elt√°vol√≠tani k√≠v√°nt cs≈ë bek√∂t√∂tt v√©ge
     */
    public void RemovePipe(PipeEnd pe) {
        Skeleton.Start(this, "RemovePipe(" + Skeleton.GetObjectName(pe) + ")");
        pipeEnds.remove(pe);
        pe.DisconnectFromNode();
        Skeleton.End();
    }

    /**
     * Getter, mely visszaadja az akt√≠v elemhez csatlakozatott cs√∂veg bek√∂t√∂tt v√©geit
     * @return a bek√∂t√∂tt cs≈ëv√©gek list√°ja
     */
    public List<PipeEnd> GetPipeEnds() {
        Skeleton.Start(this, "GetPipeEnds()");
        Skeleton.End();
        Skeleton.PrintReturn("pipeEnds");
        return pipeEnds;
    }
}
